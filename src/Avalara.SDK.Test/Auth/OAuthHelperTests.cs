/*
 Avalara API Client Library
 * Avalara Shipping Verification for Beverage Alcohol
 *
 * API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta. 
 *
 * The version of SDK  : 22.1.0
 */

using System;
using System.IO;
using Xunit;

using Avalara.SDK.Client;
using Avalara.SDK.Api;
using Avalara.SDK.Helpers;
using Avalara.SDK.Auth;
// uncomment below to import models
//using Avalara.SDK.Model;

namespace Avalara.SDK.Test.Auth
{
    /// <summary>
    ///  Class for testing ShippingVerificationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OAuthHelperTests : IDisposable
    {
        private Configuration configuration;
        public OAuthHelperTests()
        {
            var root = Directory.GetCurrentDirectory();
            var basePath = root.Split(new string[] { "\\src\\" }, StringSplitOptions.None)[0];
            var dotenv = Path.Combine(basePath, ".env");
            DotEnv.Load(dotenv);
            configuration = new Configuration()
            {
                Environment = AvalaraEnvironment.Sandbox,
                ClientID = Environment.GetEnvironmentVariable("CLIENT_ID"),
                AppName = "Test",
                AppVersion = "1.0",
                MachineName = "LocalBox"
            };
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test DeregisterShipment
        /// </summary>
        [Fact]
        public void DeviceCodeFlowTest()
        {
            var deviceResponse = OAuthHelper.initiateDeviceAuthorizationFlow("avatax_api openid offline_access profile avatax", configuration);
            Assert.Equal("https://ai-sbx.avlr.sh/device", deviceResponse.VerificationUrl);
            var tokenResponse = OAuthHelper.getAccessTokenForDeviceFlow(deviceResponse.DeviceCode, configuration);
            Assert.Equal("authorization_pending", tokenResponse.ErrorMessage);
            Assert.Equal(400, tokenResponse.HttpStatusCode);   
        }
    }
}
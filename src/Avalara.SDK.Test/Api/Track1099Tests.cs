/*
 Avalara API Client Library
 * Avalara Shipping Verification for Beverage Alcohol
 *
 * API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta. 
 *
 * The version of SDK  : 22.1.0
 */

using System;
using System.IO;
using Xunit;

using Avalara.SDK.Client;
using Avalara.SDK.Helpers;
using Avalara.SDK.Api.Track1099.V2;
using System.Threading.Tasks;

namespace Avalara.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing IssuersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class Track1099Tests : IDisposable
    {
        private ApiClient apiclient;
        private Class1099IssuersApi issuersApi;
        public Track1099Tests()
        {
            var root = Directory.GetCurrentDirectory();
            var basePath = root.Split(new string[] { "\\src\\" }, StringSplitOptions.None)[0];
            var dotenv = Path.Combine(basePath, ".env");
            DotEnv.Load(dotenv);
            Configuration configuration = new Configuration
            {
                Environment = AvalaraEnvironment.QA,
                BearerToken = Environment.GetEnvironmentVariable("BEARER_TOKEN_TRACK1099"),
                AppName = "Test",
                AppVersion = "1.0",
                MachineName = "LocalBox"
            };

            apiclient = new ApiClient(configuration);
            issuersApi = new Class1099IssuersApi(apiclient);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ShippingVerificationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<Class1099IssuersApi>(issuersApi);
        }

        /// <summary>
        /// Test Get Documents
        /// </summary>
        [Fact]
        public async Task IssuersTest()
        {

            try
            {
                // Retrieve the list of Mandates
                var response = await issuersApi.Call1099IssuersGetAsync(new Call1099IssuersGetRequest() { Top = 10, Skip = 0 });
                Assert.NotNull(response);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling issuersApi.ApiIssuersGetAsync: " + e.Message);
                Console.WriteLine("Status Code: " + e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }

        }
    }
}
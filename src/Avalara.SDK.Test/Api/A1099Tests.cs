/*
 Avalara API Client Library
 * Avalara 1099 API
 *
 * API for retrieving and managing 1099 information.
 *
 * The version of SDK  : 22.1.0
 */

using System;
using System.IO;
using Xunit;

using Avalara.SDK.Client;
using Avalara.SDK.Helpers;
using Avalara.SDK.Api.A1099.V2;
using System.Threading.Tasks;
using System.Linq;

namespace Avalara.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing Issuers1099Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class A1099Tests : IDisposable
    {
        private Issuers1099Api issuersApi;
        private CompaniesW9Api companiesW9Api;
        private FormsW9Api formwW9Api;

        private Forms1099Api form1099Api;
        private ApiClient apiClient;

        public A1099Tests()
        {
            Configuration configuration = new()
            {
                BearerToken = Environment.GetEnvironmentVariable("BEARER_TOKEN_A1099"),
                TestBasePath = Environment.GetEnvironmentVariable("A1099_BASE_URL") ?? "https://api-ava1099.gamma.qa.us-west-2.aws.avalara.io/",
                AppName = "Test",
                AppVersion = "1.0",
                MachineName = "LocalBox",
                Environment = AvalaraEnvironment.QA
            };

            apiClient = new ApiClient(configuration);
            issuersApi = new Issuers1099Api(apiClient);
            formwW9Api = new FormsW9Api(apiClient);
            form1099Api = new Forms1099Api(apiClient);
            companiesW9Api = new CompaniesW9Api(apiClient);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Tests the GetIssuers API endpoint to verify it returns a valid response.
        /// </summary>
        /// <remarks>
        /// This test verifies that:
        /// 1. The API connection is properly established
        /// 2. Authentication is working correctly
        /// 3. The endpoint returns a non-null response with values
        /// 4. The pagination parameters are correctly applied
        /// </remarks>
        [Fact]
        public async Task GetIssuersTest()
        {
            // Arrange
            var request = new GetIssuersRequestSdk
            {
                AvalaraVersion = "2.0",
                XCorrelationId = Guid.NewGuid().ToString(),
                // Optional parameters
                Filter = null,
                Top = 10,
                Skip = 0,
                OrderBy = null,
                Count = true,
                CountOnly = false
            };

            // Act
            var response = await issuersApi.GetIssuersAsync(request);

            // Console.WriteLine(response.ToJson());

            // Assert
            Assert.NotNull(response);
            Assert.NotNull(response.Value);
        }

        /// <summary>
        /// Tests the GetCompanies API endpoint to verify it returns a valid response.
        /// </summary>
        /// <remarks>
        /// This test validates that:
        /// 1. The CompaniesW9Api connection is functioning properly
        /// 2. Authentication credentials are valid
        /// 3. The endpoint returns company data as expected
        /// 4. Pagination parameters are correctly processed
        /// </remarks>
        [Fact]
        public async Task GetCompaniesTest()
        {
            // Arrange
            var request = new GetCompaniesRequestSdk
            {
                AvalaraVersion = "2.0",
                XCorrelationId = Guid.NewGuid().ToString(),
                // Optional parameters
                Filter = null,
                Top = 10,
                Skip = 0,
                OrderBy = null,
                Count = true,
                CountOnly = false
            };

            // Act
            var response = await companiesW9Api.GetCompaniesAsync(request);

            // Console.WriteLine(response.ToJson());

            // Assert
            Assert.NotNull(response);
            Assert.NotNull(response.Value);
        }

        /// <summary>
        /// Tests the List1099Forms API endpoint to verify it returns 1099 forms data correctly.
        /// </summary>
        /// <remarks>
        /// This test ensures that:
        /// 1. The Forms1099Api can successfully retrieve 1099 form data
        /// 2. Authentication and authorization are working properly
        /// 3. The endpoint returns a valid collection of W9 forms
        /// 4. The response structure matches the expected format
        /// </remarks>
        [Fact]
        public async Task List1099FormsTest()
        {
            // Arrange
            var request = new List1099FormsRequestSdk
            {
                AvalaraVersion = "2.0",
                XCorrelationId = Guid.NewGuid().ToString(),
                // Optional parameters
                Filter = null,
                Top = 10,
                Skip = 0,
                OrderBy = null,
            };

            // Act
            var response = await form1099Api.List1099FormsAsync(request);

            // Console.WriteLine(response.ToJson());

            // Assert
            Assert.NotNull(response);
            Assert.NotNull(response.Data);
        }

        /// <summary>
        /// Tests the ListW9Forms API endpoint to verify it returns W9 form data correctly.
        /// </summary>
        /// <remarks>
        /// This test ensures that:
        /// 1. The FormsW9Api can successfully retrieve W9 form data
        /// 2. Authentication and authorization are working properly
        /// 3. The endpoint returns a valid collection of W9 forms
        /// 4. The response structure matches the expected format
        /// </remarks>
        // [Fact]
        // public async Task ListW9FormsTest()
        // {
        //     // Arrange
        //     var request = new ListW9FormsRequestSdk
        //     {
        //         AvalaraVersion = "2.0",
        //         XCorrelationId = Guid.NewGuid().ToString(),
        //         // Optional parameters
        //         Filter = null,
        //         Top = 10,
        //         Skip = 0,
        //         OrderBy = null,
        //         Count = true,
        //     };

        //     // Act
        //     var response = await formwW9Api.ListW9FormsAsync(request);

        //     // Console.WriteLine(response.ToJson());

        //     // Assert
        //     Assert.NotNull(response);
        //     Assert.NotNull(response.Value);
        // }
    }
}
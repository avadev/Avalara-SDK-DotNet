/*
 Avalara API Client Library
 * Avalara 1099 API
 *
 * API for retrieving and managing 1099 information.
 *
 * The version of SDK  : 22.1.0
 */

using System;
using System.IO;
using Xunit;

using Avalara.SDK.Client;
using Avalara.SDK.Helpers;
using Avalara.SDK.Api.A1099.V2;
using System.Threading.Tasks;
using System.Linq;

namespace Avalara.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing Issuers1099Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class A1099Tests : IDisposable
    {
        private Issuers1099Api issuersApi;
        private ApiClient apiClient;

        public A1099Tests()
        {
            Configuration configuration = new()
            {
                BearerToken = Environment.GetEnvironmentVariable("BEARER_TOKEN"),
                TestBasePath = Environment.GetEnvironmentVariable("BASE_URL") ?? "https://api-ava1099.gamma.qa.us-west-2.aws.avalara.io/",
                AppName = "Test",
                AppVersion = "1.0",
                MachineName = "LocalBox",
                Environment = AvalaraEnvironment.QA
            };

            apiClient = new ApiClient(configuration);
            issuersApi = new Issuers1099Api(apiClient);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Issuers1099Api
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<Issuers1099Api>(issuersApi);
        }

        /// <summary>
        /// Test GetIssuers
        /// </summary>
        [Fact]
        public async Task GetIssuersTest()
        {
            // Arrange
            var request = new GetIssuersRequestSdk
            {
                AvalaraVersion = "2.0",
                XCorrelationId = Guid.NewGuid().ToString(),
                // Optional parameters
                Filter = null,
                Top = 10,
                Skip = 0,
                OrderBy = null,
                Count = true,
                CountOnly = false
            };

            // Act
            var response = await issuersApi.GetIssuersAsync(request);

            Console.WriteLine(response.ToJson());

            // Assert
            Assert.NotNull(response);
            Assert.NotNull(response.Value);
        }
    }
}
/*
 * AvaTax Software Development Kit for C#
 *
 * (c) 2004-2022 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Avalara 1099 API Definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *

 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2022 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V3-DotNet-SDK
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Avalara.SDK.Client;
using Avalara.SDK.Model.Track1099.V2;

namespace Avalara.SDK.Api.Track1099.V2
{
    /// <summary>
    /// Represents the Request object for the ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGet API
    /// </summary>
    public class ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetRequest {
        /// <summary>
        /// Constructor for the Request object
        /// </summary>
        public ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetRequest () {
        }
        /// <summary>
        /// 
        /// </summary>
        public string AuthorizedApiRequestId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public string R { get; set; }
    }

    /// <summary>
    /// Represents the Request object for the ApiAuthorizedApiRequestsAuthorizedApiRequestIdGet API
    /// </summary>
    public class ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetRequest {
        /// <summary>
        /// Constructor for the Request object
        /// </summary>
        public ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetRequest () {
        }
        /// <summary>
        /// 
        /// </summary>
        public string AuthorizedApiRequestId { get; set; }
    }

    /// <summary>
    /// Represents the Request object for the ApiAuthorizedApiRequestsPost API
    /// </summary>
    public class ApiAuthorizedApiRequestsPostRequest {
        /// <summary>
        /// Constructor for the Request object
        /// </summary>
        public ApiAuthorizedApiRequestsPostRequest () {
        }
        /// <summary>
        /// 
        /// </summary>
        public AuthorizedApiRequestModel AuthorizedApiRequestModel { get; set; }
    }


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizedApiRequestsApiSync 
    {
        #region Synchronous Operations
        /// <summary>
        /// Execute URL for downloads
        /// </summary>
        /// <remarks>
        /// Execute the URL you created
        /// </remarks>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <returns></returns>
        void ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGet(ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetRequest requestParameters);

        /// <summary>
        /// Retrieve URL for downloads
        /// </summary>
        /// <remarks>
        /// Retrieve the URL you created
        /// </remarks>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <returns>AuthorizedApiRequestV2DataModel</returns>
        AuthorizedApiRequestV2DataModel ApiAuthorizedApiRequestsAuthorizedApiRequestIdGet(ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetRequest requestParameters);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <returns>AuthorizedApiRequestV2DataModel</returns>
        AuthorizedApiRequestV2DataModel ApiAuthorizedApiRequestsPost(ApiAuthorizedApiRequestsPostRequest requestParameters);

        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizedApiRequestsApiAsync 
    {
        #region Asynchronous Operations
        /// <summary>
        /// Execute URL for downloads
        /// </summary>
        /// <remarks>
        /// Execute the URL you created
        /// </remarks>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetAsync(ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetRequest requestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve URL for downloads
        /// </summary>
        /// <remarks>
        /// Retrieve the URL you created
        /// </remarks>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizedApiRequestV2DataModel</returns>
        System.Threading.Tasks.Task<AuthorizedApiRequestV2DataModel> ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetAsync(ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetRequest requestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizedApiRequestV2DataModel</returns>
        System.Threading.Tasks.Task<AuthorizedApiRequestV2DataModel> ApiAuthorizedApiRequestsPostAsync(ApiAuthorizedApiRequestsPostRequest requestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthorizedApiRequestsApi : IAuthorizedApiRequestsApiSync, IAuthorizedApiRequestsApiAsync
    {
        private Avalara.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizedApiRequestsApi"/> class
        /// using a Configuration object and client instance.
        /// <param name="client">The client interface for API access.</param>
        /// </summary>
        public AuthorizedApiRequestsApi(Avalara.SDK.Client.IApiClient client)
        {
             SetConfiguration(client);
             this.ExceptionFactory = Avalara.SDK.Client.Configuration.DefaultExceptionFactory;
        }       

        /// <summary>
        /// The client for accessing this underlying API.
        /// </summary>
        private Avalara.SDK.Client.IInternalApiClient Client { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        private Avalara.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Execute URL for downloads Execute the URL you created
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <returns></returns>
        public void ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGet(ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetRequest requestParameters)
        {
            ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetWithHttpInfo(requestParameters);
        }

        /// <summary>
        /// Execute URL for downloads Execute the URL you created
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <returns>ApiResponse of Object(void)</returns>
        private Avalara.SDK.Client.ApiResponse<Object> ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetWithHttpInfo(ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetRequest requestParameters)
        {
            //OAuth2 Scopes
            String requiredScopes = "";
            // verify the required parameter 'AuthorizedApiRequestId' is set
            if (requestParameters.AuthorizedApiRequestId == null)
                throw new Avalara.SDK.Client.ApiException(400, "Missing required parameter 'requestParameters.AuthorizedApiRequestId' when calling AuthorizedApiRequestsApi->ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGet");

            // verify the required parameter 'R' is set
            if (requestParameters.R == null)
                throw new Avalara.SDK.Client.ApiException(400, "Missing required parameter 'requestParameters.R' when calling AuthorizedApiRequestsApi->ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGet");

            Avalara.SDK.Client.RequestOptions localVarRequestOptions = new Avalara.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Avalara.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Avalara.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("authorizedApiRequestId", Avalara.SDK.Client.ClientUtils.ParameterToString(requestParameters.AuthorizedApiRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Avalara.SDK.Client.ClientUtils.ParameterToMultiMap("", "r", requestParameters.R));

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/authorized_api_requests/{authorizedApiRequestId}/$execute", localVarRequestOptions, requiredScopes, AvalaraMicroservice.Track1099);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute URL for downloads Execute the URL you created
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetAsync(ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetRequest requestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetWithHttpInfoAsync(requestParameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Execute URL for downloads Execute the URL you created
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        private async System.Threading.Tasks.Task<Avalara.SDK.Client.ApiResponse<Object>> ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetWithHttpInfoAsync(ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGetRequest requestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            //OAuth2 Scopes
            String requiredScopes = "";
            // verify the required parameter 'requestParameters.AuthorizedApiRequestId' is set
            if (requestParameters.AuthorizedApiRequestId == null)
                throw new Avalara.SDK.Client.ApiException(400, "Missing required parameter 'requestParameters.AuthorizedApiRequestId' when calling AuthorizedApiRequestsApi->ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGet");

            // verify the required parameter 'requestParameters.R' is set
            if (requestParameters.R == null)
                throw new Avalara.SDK.Client.ApiException(400, "Missing required parameter 'requestParameters.R' when calling AuthorizedApiRequestsApi->ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGet");


            Avalara.SDK.Client.RequestOptions localVarRequestOptions = new Avalara.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Avalara.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Avalara.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("authorizedApiRequestId", Avalara.SDK.Client.ClientUtils.ParameterToString(requestParameters.AuthorizedApiRequestId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Avalara.SDK.Client.ClientUtils.ParameterToMultiMap("", "r", requestParameters.R));

            // make the HTTP request
			var localVarResponse = await this.Client.GetAsync<Object>("/api/authorized_api_requests/{authorizedApiRequestId}/$execute", localVarRequestOptions, cancellationToken, requiredScopes, AvalaraMicroservice.Track1099).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAuthorizedApiRequestsAuthorizedApiRequestIdExecuteGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve URL for downloads Retrieve the URL you created
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <returns>AuthorizedApiRequestV2DataModel</returns>
        public AuthorizedApiRequestV2DataModel ApiAuthorizedApiRequestsAuthorizedApiRequestIdGet(ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetRequest requestParameters)
        {
            Avalara.SDK.Client.ApiResponse<AuthorizedApiRequestV2DataModel> localVarResponse = ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetWithHttpInfo(requestParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve URL for downloads Retrieve the URL you created
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <returns>ApiResponse of AuthorizedApiRequestV2DataModel</returns>
        private Avalara.SDK.Client.ApiResponse<AuthorizedApiRequestV2DataModel> ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetWithHttpInfo(ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetRequest requestParameters)
        {
            //OAuth2 Scopes
            String requiredScopes = "";
            // verify the required parameter 'AuthorizedApiRequestId' is set
            if (requestParameters.AuthorizedApiRequestId == null)
                throw new Avalara.SDK.Client.ApiException(400, "Missing required parameter 'requestParameters.AuthorizedApiRequestId' when calling AuthorizedApiRequestsApi->ApiAuthorizedApiRequestsAuthorizedApiRequestIdGet");

            Avalara.SDK.Client.RequestOptions localVarRequestOptions = new Avalara.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Avalara.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Avalara.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("authorizedApiRequestId", Avalara.SDK.Client.ClientUtils.ParameterToString(requestParameters.AuthorizedApiRequestId)); // path parameter

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthorizedApiRequestV2DataModel>("/api/authorized_api_requests/{authorizedApiRequestId}", localVarRequestOptions, requiredScopes, AvalaraMicroservice.Track1099);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAuthorizedApiRequestsAuthorizedApiRequestIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve URL for downloads Retrieve the URL you created
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizedApiRequestV2DataModel</returns>
        public async System.Threading.Tasks.Task<AuthorizedApiRequestV2DataModel> ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetAsync(ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetRequest requestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Avalara.SDK.Client.ApiResponse<AuthorizedApiRequestV2DataModel> localVarResponse = await ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetWithHttpInfoAsync(requestParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve URL for downloads Retrieve the URL you created
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizedApiRequestV2DataModel)</returns>
        private async System.Threading.Tasks.Task<Avalara.SDK.Client.ApiResponse<AuthorizedApiRequestV2DataModel>> ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetWithHttpInfoAsync(ApiAuthorizedApiRequestsAuthorizedApiRequestIdGetRequest requestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            //OAuth2 Scopes
            String requiredScopes = "";
            // verify the required parameter 'requestParameters.AuthorizedApiRequestId' is set
            if (requestParameters.AuthorizedApiRequestId == null)
                throw new Avalara.SDK.Client.ApiException(400, "Missing required parameter 'requestParameters.AuthorizedApiRequestId' when calling AuthorizedApiRequestsApi->ApiAuthorizedApiRequestsAuthorizedApiRequestIdGet");


            Avalara.SDK.Client.RequestOptions localVarRequestOptions = new Avalara.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Avalara.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Avalara.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("authorizedApiRequestId", Avalara.SDK.Client.ClientUtils.ParameterToString(requestParameters.AuthorizedApiRequestId)); // path parameter

            // make the HTTP request
			var localVarResponse = await this.Client.GetAsync<AuthorizedApiRequestV2DataModel>("/api/authorized_api_requests/{authorizedApiRequestId}", localVarRequestOptions, cancellationToken, requiredScopes, AvalaraMicroservice.Track1099).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAuthorizedApiRequestsAuthorizedApiRequestIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <returns>AuthorizedApiRequestV2DataModel</returns>
        public AuthorizedApiRequestV2DataModel ApiAuthorizedApiRequestsPost(ApiAuthorizedApiRequestsPostRequest requestParameters)
        {
            Avalara.SDK.Client.ApiResponse<AuthorizedApiRequestV2DataModel> localVarResponse = ApiAuthorizedApiRequestsPostWithHttpInfo(requestParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <returns>ApiResponse of AuthorizedApiRequestV2DataModel</returns>
        private Avalara.SDK.Client.ApiResponse<AuthorizedApiRequestV2DataModel> ApiAuthorizedApiRequestsPostWithHttpInfo(ApiAuthorizedApiRequestsPostRequest requestParameters)
        {
            //OAuth2 Scopes
            String requiredScopes = "";
            Avalara.SDK.Client.RequestOptions localVarRequestOptions = new Avalara.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Avalara.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Avalara.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestParameters.AuthorizedApiRequestModel;

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthorizedApiRequestV2DataModel>("/api/authorized-api-requests", localVarRequestOptions, requiredScopes, AvalaraMicroservice.Track1099);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAuthorizedApiRequestsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizedApiRequestV2DataModel</returns>
        public async System.Threading.Tasks.Task<AuthorizedApiRequestV2DataModel> ApiAuthorizedApiRequestsPostAsync(ApiAuthorizedApiRequestsPostRequest requestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Avalara.SDK.Client.ApiResponse<AuthorizedApiRequestV2DataModel> localVarResponse = await ApiAuthorizedApiRequestsPostWithHttpInfoAsync(requestParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Avalara.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestParameters">Request Object for the API</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizedApiRequestV2DataModel)</returns>
        private async System.Threading.Tasks.Task<Avalara.SDK.Client.ApiResponse<AuthorizedApiRequestV2DataModel>> ApiAuthorizedApiRequestsPostWithHttpInfoAsync(ApiAuthorizedApiRequestsPostRequest requestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            //OAuth2 Scopes
            String requiredScopes = "";

            Avalara.SDK.Client.RequestOptions localVarRequestOptions = new Avalara.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Avalara.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Avalara.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestParameters.AuthorizedApiRequestModel;

            // make the HTTP request
			var localVarResponse = await this.Client.PostAsync<AuthorizedApiRequestV2DataModel>("/api/authorized-api-requests", localVarRequestOptions, cancellationToken, requiredScopes, AvalaraMicroservice.Track1099).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAuthorizedApiRequestsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the configuration object in APIClient
        /// </summary>        
        private void SetConfiguration(IApiClient client)
        {
            if (client == null) throw new ArgumentNullException("ApiClient");
            if (client.Configuration == null) throw new ArgumentNullException("ApiClient.Configuration");

            this.Client = (IInternalApiClient)client;
            this.Client.SdkVersion = "25.2.0";
        }
        
    }

    
}
